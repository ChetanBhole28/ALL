
 1. Go Program to Find the Compound Interest
 
 package main

import (
    "fmt"
    "math"
)

func main() {

    var Pamount, InterestRate, timePeriod, ciFuture, compoundI float64

    fmt.Print("Enter the Total or Principal Amount = ")
    fmt.Scanln(&Pamount)

    fmt.Print("Enter the Interest Rate = ")
    fmt.Scanln(&InterestRate)

    fmt.Print("Enter the Total number of Years = ")
    fmt.Scanln(&timePeriod)

    ciFuture = Pamount * (math.Pow((1 + InterestRate/100), timePeriod))
    compoundI = ciFuture - Pamount

    fmt.Println("\nThe Compound Interest  = ", compoundI)
    fmt.Println("The Future Compound Interest  = ", ciFuture)
}

2. Go Program to Count Digits in a Number

package main
import "fmt"
func main(){
 var n int
 fmt.Print("Enter the number: ")
 fmt.Scanf("%d", &n)
 count := 0
 for n >0 {
 n = n/10
 count++
 }
 fmt.Printf("The number of digits in the given number is: %d", count)
 
 
 3. Go Program to Count Total Notes in an Amount
 
 package main

import "fmt"

func main() {
    notes := [8]int{500, 100, 50, 20, 10, 5, 2, 1}
    var amount int
    fmt.Print("Enter the Total Amount of Cash = ")
    fmt.Scanln(&amount)

    temp := amount
    for i := 0; i < 8; i++ {
        fmt.Println(notes[i], " Notes = ", temp/notes[i])
        temp = temp % notes[i]
    }
}

4. Go Program to Find the Cube of a Number

package main

import "fmt"

func main() {

    var num int

    fmt.Print("Enter the Number to find Cube = ")
    fmt.Scanln(&num)

    cube := num * num * num

    fmt.Println("\nThe Cube of a Given Number  = ", cube)
}

5. Go Program to Calculate the Employee Salary

package main

import "fmt"

func main() {

    var basicSal, hra, da, grossSal float64

    fmt.Print("Enter the Employee Basic Salary = ")
    fmt.Scanln(&basicSal)

    if basicSal <= 10000 {
        hra = (basicSal * 8) / 100
        da = (basicSal * 10) / 100
    } else if basicSal <= 20000 {
        hra = (basicSal * 16) / 100
        da = (basicSal * 20) / 100
    } else {
        hra = (basicSal * 24) / 100
        da = (basicSal * 30) / 100
    }

    grossSal = basicSal + hra + da
    fmt.Println("The Gross Salary of this Employee = ", grossSal)
}


6. Go Program to calculate Electricity Bill

package main

import "fmt"

func main() {

    var units, surCharge, amount, totAmount float64

    fmt.Print("Enter the Consumed Units = ")
    fmt.Scanln(&units)

    if units < 50 {
        amount = units * 2.60
        surCharge = 25
    } else if units <= 100 {
        amount = 130 + ((units - 50) * 3.25)
        surCharge = 35
    } else if units <= 100 {
        amount = 130 + 162.50 + ((units - 100) * 5.26)
        surCharge = 45
    } else {
        amount = 130 + +162.50 + 526 + ((units - 200) * 7.75)
        surCharge = 55
    }
    totAmount = amount + surCharge
    fmt.Println("Electricity Bill = ", totAmount)
}


7. Go Program to check Even or Odd

package main
Import "fmt"
func check(n int) bool{
 if n < 2 {
 return n % 2 == 0
 }
 return check(n - 2)
}
func main(){
 var number int
 fmt.Print("Enter a number:")
 fmt.Scanf("%d", &number)
 check(number)
 if check(number)==true {
 fmt.Println("Number is even!")
 }else{
 fmt.Println("Number is odd!")
 }
}


8. Go Program to print Even Numbers from 1 to N

package main
import "fmt"
func main() {
 var evnum, i int
 fmt.Print("Enter the Number to Print Even's = ")
 fmt.Scanln(&evnum)
 fmt.Println("Even Numbers from 1 to ", evnum, " are = ")
 for i = 2; i <= evnum; i = i + 2 {
 fmt.Print(i, "\t")
 }
 fmt.Println()
}


9. Go Program to find Factors of a Number

package main
// fmt package provides the function to print anything
import "fmt"

// start the main() function
func main() {
   // Declare and initialize the variables
   var num = 15
   var i int
    
   fmt.Println("The factors of the number", num, " are = ")
   // using for loop the condition is evaluated. 
   // If the condition is true, the body of the for loop is executed
   for i = 1; i <= num; i++ {
      if num%i == 0 {
         fmt.Println(i)
      }
   } // Print the result
}

10. Go Program to find Factorial of a Number

package main
import "fmt"
func main() {
 var factorialnum, factorial int
 factorial = 1
 fmt.Print("Enter any Number to find the Factorial = ")
 fmt.Scanln(&factorialnum)
 for i := 1; i <= factorialnum; i++ {
 factorial = factorial * i
 }
 fmt.Println("The Factorial of ", factorialnum, " = ", factorial)
}


11. Go Program to find First Digit of a Number

package main

import "fmt"

func main() {

    var firstDigit, number int

    fmt.Print("Enter any Number to return First Digit = ")
    fmt.Scanln(&number)

    firstDigit = number
    for firstDigit >= 10 {
        firstDigit = firstDigit / 10
    }

    fmt.Println("The First Digit of this Number    = ", firstDigit)
}

12. Print 1 to 100 without using loop

package main
import "fmt"
func printNumbers(num int) {
 if num <= 100 {
 fmt.Print(num, "\t")
 printNumbers(num + 1)
 }
}
func main() {
 number := 1
 printNumbers(number)
}


13. Reverse a Number

package main
import "fmt"
func reverseNumber(num int) int {

   res := 0
   for num>0 {
      remainder := num % 10
      res = (res * 10) + remainder
      num /= 10
   }
   return res
}

func main(){
   fmt.Println(reverseNumber(168))
   fmt.Println(reverseNumber(576))
   fmt.Println(reverseNumber(12345))
}


14. Roots of a Quadratic Equation

package main

import (
    "fmt"
    "math"
)

func main() {

    var a, b, c, root1, root2, imaginary, discriminant float64

    fmt.Print("Enter the a, b, c of Quadratic equation = ")
    fmt.Scanln(&a, &b, &c)

    discriminant = (b * b) - (4 * a * c)

    if discriminant > 0 {
        root1 = (-b + math.Sqrt(discriminant)/(2*a))
        root2 = (-b - math.Sqrt(discriminant)/(2*a))
        fmt.Println("Two Distinct Real Roots Exist: root1 = ", root1, " and root2 = ", root2)
    } else if discriminant == 0 {
        root1 = -b / (2 * a)
        root2 = -b / (2 * a)
        fmt.Println("Two Equal and Real Roots Exist: root1 = ", root1, " and root2 = ", root2)
    } else if discriminant < 0 {
        root1 = -b / (2 * a)
        root2 = -b / (2 * a)
        imaginary = math.Sqrt(-discriminant) / (2 * a)
        fmt.Println("Two Distinct Complex Roots Exist: root1 = ", root1, "+", imaginary, " and root2 = ", root2, "-", imaginary)
    }
}

15. Sum and Average of Natural Numbers

package main

import "fmt"

func main() {

    var num, i int

    fmt.Print("\nEnter the Maximum Natural Number = ")
    fmt.Scanln(&num)

    total := 0

    for i = 1; i <= num; i++ {
        total = total + i
    }
    average := total / num

    fmt.Println("The Sum of Natural Numbers from 1 to ", num, " = ", total)
    fmt.Println("The Average of Natural Numbers from 1 to ", num, " = ", average)
}

16. Sum of Digits in a Number

package main

import "fmt"

func main() {

    var digiNum, digiSum, digiReminder int

    fmt.Print("Enter the Number to find the Sum of Digits = ")
    fmt.Scanln(&digiNum)

    for digiSum = 0; digiNum > 0; digiNum = digiNum / 10 {
        digiReminder = digiNum % 10
        digiSum = digiSum + digiReminder
    }
    fmt.Println("The Sum of Digits in this Number = ", digiSum)
}

17. Count Even and Odd Numbers in an Array

package main
import "fmt"
func main() {
 var size, i int
 fmt.Print("Enter the Even Odd Array Size = ")
 fmt.Scan(&size)
 evoddarr := make([]int, size)
 fmt.Print("Enter the Even Odd Array Items = ")
 for i = 0; i < size; i++ {
 fmt.Scan(&evoddarr[i])
 }
 evenCount := 0
 oddCount := 0
 for i = 0; i < size; i++ {
 if evoddarr[i]%2 == 0 {
 evenCount++
 } else {
 oddCount++
 }
 }
 fmt.Println("The Total Number of Even Numbers = ", evenCount)
 fmt.Println("The Total Number of Odd Numbers = ", oddCount)
}

18. Reverse an Array

package main
import "fmt"
func reverseArray(arr []int) []int{
 for i, j := 0, len(arr)-1; i<j; i, j = i+1, j-1 {
 arr[i], arr[j] = arr[j], arr[i]
 }
 return arr
}
func main(){
 fmt.Println(reverseArray([]int{1, 2, 3, 4, 5}))
 fmt.Println(reverseArray([]int{3, 5, 7, 2, 1}))
 fmt.Println(reverseArray([]int{9, 8, 6, 1, 0}))
}

19.  Search for Array Items

package main

import "fmt"

func main() {
    var sersize, i, search int

    fmt.Print("Enter the Even Array Size = ")
    fmt.Scan(&sersize)

    serArr := make([]int, sersize)

    fmt.Print("Enter the Even Array Items  = ")
    for i = 0; i < sersize; i++ {
        fmt.Scan(&serArr[i])
    }
    fmt.Print("Enter the Array Search Item  = ")
    fmt.Scan(&search)
    flag := 0
    for i = 0; i < sersize; i++ {
        if serArr[i] == search {
            flag = 1
            break
        }
    }
    if flag == 1 {
        fmt.Println("We Found the Search Item ", search, " at position = ", i)
    } else {
        fmt.Println("We haven't Found the Search Item ")
    }
}

20. Transpose a Matrix

package main
import "fmt"
func main() {
 var i, j, rows, columns int
 var orgMat [10][10]int
 var transposeMat [10][10]int
 fmt.Print("Enter the Matrix rows and Columns = ")
 fmt.Scan(&rows, &columns)
 fmt.Println("Enter Matrix Items to Transpose = ")
 for i = 0; i < rows; i++ {
 for j = 0; j < columns; j++ {
 fmt.Scan(&orgMat[i][j])
 }
 }
 for i = 0; i < rows; i++ {
 for j = 0; j < columns; j++ {
 transposeMat[j][i] = orgMat[i][j]
 }
 }
 fmt.Println("*** The Transpose Matrix Items are ***")
 for i = 0; i < columns; i++ {
 for j = 0; j < rows; j++ {
 fmt.Print(transposeMat[i][j], " ")
 }
 fmt.Println()
 }
}


21. Addition of two matrix

package main
import "fmt"
func main() {
 var row, col int
 var mat_1, mat_2, result [10][10]int
 fmt.Print("Enter no of rows: ")
 fmt.Scanln(&row)
 fmt.Print("Enter no of column: ")
 fmt.Scanln(&col)
 fmt.Println("\nEnter matrix_1 elements: ")
 for i := 0; i < row; i++ {
 for j := 0; j < col; j++ {
 fmt.Scanf("%d ", &mat_1[i][j])
 }
 }
 fmt.Println("\nEnter matrix_2 elements: ")
 for i := 0; i < row; i++ {
 for j := 0; j < col; j++ {
 fmt.Scanf("%d ", &mat_2[i][j])
 }
 }
// Adding two matrix
 for i := 0; i < row; i++ {
 for j := 0; j < col; j++ {
 result[i][j] = mat_1[i][j] + mat_2[i][j]
 }
 }
 fmt.Println("\nAfter adding Matrix is: \n")
 for i := 0; i < row; i++ {
 for j := 0; j < col; j++ {
 fmt.Printf("%d ", result[i][j])
 }
 fmt.Println("\n")
 }
}

22. Find First Character in a String

package main
import "fmt"
func main() {
 var strFirstChar string
 strFirstChar = "Tutorial Gateway"
 fmt.Println(strFirstChar)
 firstChar := strFirstChar[0]
 fmt.Printf("The First Character in this String = %c\n", firstChar)
}

23. Find Last Character in a String

package main
import "fmt"
func main() {
 var strLastChar string
 strLastChar = "Tutorial Gateway"
 fmt.Println(strLastChar)
 LastChar := strLastChar[len(strLastChar)-1]
 fmt.Printf("The Last Character in this String = %c\n", LastChar)
}

24. Golang program to check a specified string is started with a given character using regular expression

package main

import "fmt"
import "regexp"

func main() {
	var str string

	fmt.Printf("Enter string: ")
	fmt.Scanf("%s", &str)

	result, _ := regexp.MatchString("M([a-z]+)*", str)

	if result == true {
		fmt.Printf("String '%s' started with charter M\n", str)
	} else {
		fmt.Printf("String '%s' is not started with charter M\n", str)
	}
}

25. Golang program to check a specified string pattern within a specified string using regular expression

package main

import "fmt"
import "regexp"

func main() {
	result, _ := regexp.Compile("L([A-Z]+)N")

	fmt.Println(result.MatchString("LAN Network"))
	fmt.Println(result.MatchString("The king of forest is LION"))
	fmt.Println(result.MatchString("lan network"))
}

26. Golang program to demonstrate the regular expression function FindString()

package main
import "fmt"
import "regexp"
func main() {
result, _ := regexp.Compile("L([A-Z]+)N")
fmt.Println(result.FindString("LUCY Yonko"))
fmt.Println(result.FindString("The king of pirates is LUFFY"))
fmt.Println(result.FindString("luffy naruto"))
}


27. Golang program to demonstrate the regular expression function FindStringIndex()

package main
import "fmt"
import "regexp"
func main() {
result, _ := regexp.Compile("L([A-Z]+)Y")
fmt.Println(result.FindStringIndex("LUCY Yonko"))
fmt.Println(result.FindStringIndex("The king of forest is LUFFY"))
fmt.Println(result.FindStringIndex("luffy yonko"))
}


28. Golang program to demonstrate the regular expression function FindStringSubmatch()

package main

import "fmt"
import "regexp"

func main() {
	result, _ := regexp.Compile("L([A-Z]+)N")

	fmt.Println(result.FindStringSubmatch("LAN Network"))
	fmt.Println(result.FindStringSubmatch("The king of forest is LION"))
	fmt.Println(result.FindStringSubmatch("lan network"))
}

29. Golang program to create a simple map

package main
import "fmt"
func main() {
 map_1 := map[int]string{

 90: "Dog",
 91: "Cat",
 92: "Cow",
 93: "Bird",
 94: "Rabbit",
 }

 fmt.Println("Map-1: ", map_1)
}

30. Golang program to delete an item from a map

package main

import "fmt"

func main() {
	CountryCode := make(map[string]int)

	CountryCode["ind"] = 101
	CountryCode["aus"] = 102
	CountryCode["eng"] = 103
	CountryCode["pak"] = 104
	CountryCode["usa"] = 105

	delete(CountryCode, "pak")

	fmt.Println("India    :", CountryCode["ind"])
	fmt.Println("Australia:", CountryCode["aus"])
	fmt.Println("England  :", CountryCode["eng"])
	fmt.Println("Pakistan :", CountryCode["pak"])
	fmt.Println("USA      :", CountryCode["usa"])
}

31. Golang program to count the items of a map

package main
import "fmt"
func main() {
OnePiece := make(map[string]int)
OnePiece["Luffy"] = 01
OnePiece["Zoro"] = 02
OnePiece["Nami"] = 03
OnePiece["Ussopp"] = 04
OnePiece["Sanji"] = 05
fmt.Println("Length of OnePiece ", len(OnePiece))
delete(OnePiece, "Ussopp")
fmt.Println("Length of OnePiece ", len(OnePiece))
}

32. Golang program to create a copy of the map

package main

import "fmt"

func main() {
	var CountryCode = make(map[string]int)

	CountryCode["ind"] = 101
	CountryCode["aus"] = 102
	CountryCode["eng"] = 103
	CountryCode["pak"] = 104
	CountryCode["usa"] = 105

	var CloneMap = CountryCode

	fmt.Println("CountryCode: ", CountryCode)
	fmt.Println("CloneMap   : ", CloneMap)
}

33. Golang program to iterate map elements using the range

package main

import "fmt"

func main() {
	var CountryCode = make(map[string]int)

	CountryCode["ind"] = 101
	CountryCode["aus"] = 102
	CountryCode["eng"] = 103
	CountryCode["pak"] = 104
	CountryCode["usa"] = 105

	fmt.Printf("\nMap elements: ")
	for Key, Value := range CountryCode {
		fmt.Printf("\n%s : %d", Key, Value)
	}
}

34.  Golang program to create a slice from an integer array

package main

import "fmt"

func main() {
	//Create an integer array
	arr := [10]int{10, 20, 30, 40, 50, 60, 70, 80, 90, 100}

	//create slice of from index 2 till index 4(5-1).
	intSlice := arr[2:5]

	fmt.Println("Integer slice: ", intSlice)
}

35. Golang program to find the length of a slice

package main
import "fmt"
func main() {
 var x = []int{5, 8, 14, 7, 3}
 var xLen = len(x)
 fmt.Print("Length of slice is : ", xLen)
}

36. Golang program to find the capacity of a slice

package main
import "fmt"
func main() {
 // Creating an array
 arr := [7]string{"OnePiece", "Naruto", "DemonSlayer", "MobPsycho",
 "CodeGeass", "DrStone", "DragonBall"}

 // Creating a slice
 myslice := arr[1:6]
 // Display slice
 fmt.Println("Slice:", myslice)
 // Display the capacity of the slice
 fmt.Printf("\nCapacity of the slice: %d", cap(myslice))
}

37. Golang program to demonstrate the different ways to create slices

package main

import "fmt"

func main() {
	//Create an array of strings.
	arr := []string{"Hello ", "How ", "are ", "you"}

	//different ways to create slices.
	Slice1 := arr[1:3]
	Slice2 := arr[1:]
	Slice3 := arr[:3]
	Slice4 := arr[:]

	fmt.Println("slice1: ", Slice1)
	fmt.Println("slice2: ", Slice2)
	fmt.Println("slice3: ", Slice3)
	fmt.Println("slice4: ", Slice4)
}

38. Golang program to create a new slice from the existing slice

package main

import "fmt"

func main() {
	//Create an array of integers.
	arr := [8]int{1, 2, 3, 4, 5, 6, 7, 8}

	OrgSlice := arr[1:7]
	NewSlice := OrgSlice[1:4]

	fmt.Println("Orginal slice: ", OrgSlice)
	fmt.Println("New slice: ", NewSlice)
}

39. Golang program to demonstrate the implementation of structure

package main

import "fmt"

// Declaration of structure
type Student struct {
	Id   int
	Name string
	Fees int
}

func main() {
	var stu Student

	stu.Id = 101
	stu.Name = "Kapil"
	stu.Fees = 12000

	fmt.Printf("Student Information:")
	fmt.Printf("\n\tStudent Id     : %d", stu.Id)
	fmt.Printf("\n\tStudent Name   : %s", stu.Name)
	fmt.Printf("\n\tStudent Fees   : %d", stu.Fees)

}

40. Golang program to initialize the object of structure in a single line

package main

import "fmt"

// Declaration of structure
type Student struct {
	Id   int
	Name string
	Fees int
}

func main() {
	stu1 := Student{Id: 101, Name: "Kapil", Fees: 10000}
	stu2 := Student{Id: 102, Name: "Amit", Fees: 12000}
	stu3 := Student{Id: 103, Name: "Arun", Fees: 15000}

	fmt.Printf("Student Information:")

	fmt.Printf("\n\nStudent1:")
	fmt.Printf("\n\tStudent Id     : %d", stu1.Id)
	fmt.Printf("\n\tStudent Name   : %s", stu1.Name)
	fmt.Printf("\n\tStudent Fees   : %d", stu1.Fees)

	fmt.Printf("\n\nStudent2:")
	fmt.Printf("\n\tStudent Id     : %d", stu2.Id)
	fmt.Printf("\n\tStudent Name   : %s", stu2.Name)
	fmt.Printf("\n\tStudent Fees   : %d", stu2.Fees)

	fmt.Printf("\n\nStudent3:")
	fmt.Printf("\n\tStudent Id     : %d", stu3.Id)
	fmt.Printf("\n\tStudent Name   : %s", stu3.Name)
	fmt.Printf("\n\tStudent Fees   : %d", stu3.Fees)
}

41. Golang program to print the object of structure

package main
import "fmt"
// Declaration of structure
type Student struct {
Id int
Name string
Fees int
}
func main() {
stu1 := Student{Id: 101, Name: "Chetan", Fees: 10000}
stu2 := Student{Id: 102, Name: "Rohan", Fees: 12000}
stu3 := Student{Id: 103, Name: "Prathamesh", Fees: 15000}
fmt.Printf("Student Infomation:")
fmt.Println("\nStudent1: ", stu1)
fmt.Println("\nStudent2: ", stu2)
fmt.Println("\nStudent3: ", stu3)
}

42. Golang program to get the size of structure using Sizeof() operator

package main
import "fmt"
import "unsafe"
// Declaration of structure
type Sample struct {
num1 int
num2 int
num3 int
}
func main() {
obj := Sample{num1: 101, num2: 102, num3: 103}
fmt.Println("Structure information: \n", obj)
fmt.Println("\nSize of Structure: ", unsafe.Sizeof(obj))
}


43. Golang program to demonstrate the array of the structure

package main

import "fmt"

// Declaration of structure
type Student struct {
	Id   int
	Name string
	Fees int
}

func main() {
	var stu [2]Student

	stu[0].Id = 101
	stu[0].Name = "Kapil"
	stu[0].Fees = 12000

	stu[1].Id = 102
	stu[1].Name = "Deny"
	stu[1].Fees = 12000

	fmt.Printf("Student Information:")

	fmt.Printf("\n\nStudent[0]:")
	fmt.Printf("\n\tStudent Id     : %d", stu[0].Id)
	fmt.Printf("\n\tStudent Name   : %s", stu[0].Name)
	fmt.Printf("\n\tStudent Fees   : %d", stu[0].Fees)

	fmt.Printf("\n\nStudent[1]:")
	fmt.Printf("\n\tStudent Id     : %d", stu[1].Id)
	fmt.Printf("\n\tStudent Name   : %s", stu[1].Name)
	fmt.Printf("\n\tStudent Fees   : %d", stu[1].Fees)

}

44. Golang program to create a user-defined function

package main
import "fmt"
func OnePiece() {
fmt.Println("Straw Hats")
}
func main() {
OnePiece()
}

45. Golang program to create a user-defined function to add two integer numbers

package main
import "fmt"
func addition(num1 int, num2 int) int {
var result int = 0
result = num1 + num2
return result
}
func main() {
var num1 int = 0
var num2 int = 0
var result int = 0
fmt.Print("Enter number1 and number2 : ")
fmt.Scanf("%d", &num1)
fmt.Scanf("%d", &num2)
result = addition(num1, num2)
fmt.Println("Addition is: ", result)
}

46. Golang program to demonstrate the call by value mechanism in a user-defined function

package main

import "fmt"

func Swap(num1 int, num2 int) {
	var temp int = 0

	temp = num1
	num1 = num2
	num2 = temp
}
func main() {
	var num1 int = 10
	var num2 int = 20

	fmt.Println("Numbers before swapping: ", num1, num2)
	Swap(num1, num2)
	fmt.Println("Numbers after swapping: ", num1, num2)
}

47. Golang program to demonstrate the call by reference mechanism in a user-defined function

package main

import "fmt"

func Swap(num1 *int, num2 *int) {
	var temp int = 0

	temp = *num1
	*num1 = *num2
	*num2 = temp
}
func main() {
	var num1 int = 10
	var num2 int = 20

	fmt.Println("Numbers before swapping: ", num1, num2)
	Swap(&num1, &num2)
	fmt.Println("Numbers after swapping: ", num1, num2)
}

48. Golang program to pass an array in a user-defined function

package main

import "fmt"

func PrintArray(arr [5]int) {
	fmt.Println("Array Elements: ")
	for i := 0; i < len(arr); i++ {
		fmt.Printf("%d ", arr[i])
	}
}
func main() {
	var intArr [5]int

	fmt.Println("Enter array elements: ")
	for i := 0; i < 5; i++ {
		fmt.Printf("Element[%d]: ", i)
		fmt.Scanf("%d ", &intArr[i])
	}

	PrintArray(intArr)
}

49. Golang program to get the type of specified variable

package main
import (
"fmt"
"reflect"
)
func main() {
var num1 int = 10
var num2 byte = 20
var str string = "Hello"
fmt.Println("Type of num1 is: ", reflect.TypeOf(num1))
fmt.Println("Type of num2 is: ", reflect.TypeOf(num2))
fmt.Println("Type of str is : ", reflect.TypeOf(str))
}

50. Golang program to demonstrate the reflect.NumField() function

package main

import (
	"fmt"
	"reflect"
)

type Student struct {
	Id   int
	Name string
	Age  int
}

func main() {
	stu := Student{Id: 101, Name: "Rohit", Age: 31}

	res := reflect.TypeOf(stu)
	fmt.Println("Total of fields are: ", res.NumField())
}

51. Golang program to demonstrate the use of fallthrough keyword

package main
import "fmt"
func main() {
country := "In"
switch {
case country == "In":
fmt.Println("India")
fallthrough
case country == "US":
fmt.Println("USA")
fallthrough
case country == "UK":
fmt.Println("United Kingdom")
}
}

52. Golang program to demonstrate the errors.New() function

package main

import "fmt"
import "errors"

func divide(num1 int, num2 int) (int, error) {

	if num2 == 0 {
		return 0, errors.New("Divide by zero")
	}
	return num1 / num2, nil
}

func main() {
	res, err := divide(10, 0)

	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println("Result: ", res)
	}
}

53. Accept a number from the console and check if it is between 1 and 10.

package main
import "fmt"
func main() {
 var num int
 fmt.Print("Enter a number: ")
 fmt.Scan(&num)

 if num >= 1 && num <= 10 {
 fmt.Printf("%d is between 1 and 10\n", num)
 } else {
 fmt.Printf("%d is not between 1 and 10\n", num)
 }
}

54. Calculate sum of first n numbers

package main
import "fmt"
func main() {
 var n int

 fmt.Print("Enter a positive integer n : ")
 fmt.Scan(&n)

 sum := 0

 for i := 1; i <= n; i++ {
 sum += i
 }
 fmt.Printf("The sum of the first %d numbers is %d\n", n, sum)
}

55. Create a Slice using Make function

import "fmt"
func main(){

 mySlice := make([]string, 5)
 mySlice[0] = "Chetan"
 mySlice[1] = "Abhishek"
 mySlice[2] = "Sahil"
 mySlice[3] = "Vaishnav"
 mySlice[4] = "Yogesh"
 fmt.Println(mySlice)
}


56. Create and initialize map using make function

package main
import "fmt"
func main() {
 var employee = make(map[string]int)
 employee["Kakashi"] = 10
 employee["Zoro"] = 20
 fmt.Println(employee)

 employeeList := make(map[string]int)
 employeeList["Kakashi"] = 10
 employeeList["Zoro"] = 20
 fmt.Println(employeeList)
}

57. Recursive function to find factorial of a number

package main
import "fmt"
func factorial(n int) int {
if n == 0 {
return 1
}
return n * factorial(n-1)
}
func main() {
 fmt.Print("Enter Number : ")
n := 5
 fmt.Scanf("%d", &n)
result := factorial(n)
fmt.Println("Factorial of", n, "is :", result)
}

58. Write a function that accepts 2 numbers and performs addition, subtraction and return both values.

package main
import "fmt"
func Number(number1, number2 int) (int, int) {

 add := number1 + number2
 sub := number1 - number2
 return add,sub
}
func main() {

number1 := 0
number2 := 0
fmt.Scanf("%d", &number1)
 fmt.Scanf("%d", &number2)
add,sub := Number(number1, number2)


 fmt.Println("Addition of ", number1, "+" , number2, "=", add)
 fmt.Println("Subtraction of ", number1 , "-", number2, "=", sub)
}

59. Write a function with one variadic parameter that finds the greatest number in a list of n numbers.

package main
import "fmt"
func greatestNumber(args ... int) int {
max := int(0)
for _, arg := range args {
if arg > max {
max = arg
}
}
return max
}
func main() {
 fmt.Println("Greatest Number in a List is : ",
greatestNumber(12,3,84,32,52,97,6))
}

60. Write a program to swap two integer

package main
import "fmt"
func main() {
 var number1, number2, number3 int
 fmt.Print("Enter Two Numbers : ")
 fmt.Scanf("%d",&number1)
 fmt.Scanf("%d", &number2)
 fmt.Println("Numbers before swapping: \n Number 1 =", number1,"\n Number
2 =", number2)

 number3 = number1
 number1 = number2
 number2 = number3

 fmt.Println("Numbers after swapping:\n Number 1 =", number1,"\n Number 2
=", number2)
}

61. - Illustrate creation and accessing a structure.

package main
import "fmt"
type Person struct {
name string
 age int
}
func main() {
c := Person{name: "Chetan", age: 22}
fmt.Println("Person Name: ", c.name)
fmt.Println("Person Age ", c.age)
fmt.Println("Person: ", c)
}

62. Program to demonstrate the concept of Interfaces

package main
import "fmt"
// Creating an interface
type tank interface {
// Methods
Tarea() float64
Volume() float64
}
type myvalue struct {
radius float64
height float64
}
// Implementing methods of
// the tank interface
func (m myvalue) Tarea() float64 {
return 2*m.radius*m.height +
2*3.14*m.radius*m.radius
}
func (m myvalue) Volume() float64 {
return 3.14 * m.radius * m.radius * m.height
}
// Main Method
func main() {
// Accessing elements of
// the tank interface
var t tank
t = myvalue{10, 14}
fmt.Println("Area of tank :", t.Tarea())
fmt.Println("Volume of tank:", t.Volume())
}

63. Program to write a list of cities to a new file

package main
import ("fmt"; "log"; "os")
func main() {
// list of cities
cities := []string{"Navi Mumbai", "Pune", "Bengaluru", "Delhi",
"Kolkata"}
// create a new file
file, err := os.Create("cities.txt")
if err != nil {
log.Fatal(err)
}
defer file.Close()
// write the cities to the file
for _, city := range cities {
_, err := fmt.Fprintln(file, city)
if err != nil {
log.Fatal(err)
}
}
fmt.Println("Cities have been written to cities.txt")
}

64. program to illustrate the concept of Goroutine

package main
import (
 "fmt"
 "time"
)
func display(str string) {
 for w := 0; w < 6; w++ {
 time.Sleep(1 * time.Second)
 fmt.Println(str)
 }
}
func main() {
 // Calling Goroutine
 go display("Hello")
 // Calling normal function
 display("World")
}


65. Send and receive data from Channel

package main
import "fmt"
func main() {
// create a channel of type string
ch := make(chan string)
// send data to the channel in a separate Goroutine
go func() {
ch <- "Chetan"
ch <- "Bhole"
close(ch)
}()
// receive data from the channel in the main Goroutine
for msg := range ch {
fmt.Println("Message from Channel is : ", msg)
}
}

66. Display sum, product, quotient of two numbers.

package main
import "fmt"
func main() {
 var num1, num2 float64

 fmt.Print("Enter first number: ")
 fmt.Scan(&num1)

 fmt.Print("Enter second number: ")
 fmt.Scan(&num2)

 sum := num1 + num2
 product := num1 * num2
 quotient := num1 / num2
 fmt.Printf("Sum: %f\nProduct: %f\nQuotient: %f\n", sum, product,
quotient)
}









